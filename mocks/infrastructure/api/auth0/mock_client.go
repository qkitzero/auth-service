// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/api/auth0/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/api/auth0/client.go -destination=mocks/infrastructure/api/auth0/mock_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	auth0 "github.com/qkitzero/auth-service/internal/infrastructure/api/auth0"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ExchangeCode mocks base method.
func (m *MockClient) ExchangeCode(code, redirectURI string) (*auth0.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCode", code, redirectURI)
	ret0, _ := ret[0].(*auth0.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCode indicates an expected call of ExchangeCode.
func (mr *MockClientMockRecorder) ExchangeCode(code, redirectURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCode", reflect.TypeOf((*MockClient)(nil).ExchangeCode), code, redirectURI)
}

// Login mocks base method.
func (m *MockClient) Login(redirectURI string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", redirectURI)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockClientMockRecorder) Login(redirectURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClient)(nil).Login), redirectURI)
}

// Logout mocks base method.
func (m *MockClient) Logout(returnTo string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", returnTo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockClientMockRecorder) Logout(returnTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockClient)(nil).Logout), returnTo)
}

// RefreshToken mocks base method.
func (m *MockClient) RefreshToken(refreshToken string) (*auth0.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", refreshToken)
	ret0, _ := ret[0].(*auth0.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockClientMockRecorder) RefreshToken(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockClient)(nil).RefreshToken), refreshToken)
}

// RevokeToken mocks base method.
func (m *MockClient) RevokeToken(refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockClientMockRecorder) RevokeToken(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockClient)(nil).RevokeToken), refreshToken)
}

// VerifyToken mocks base method.
func (m *MockClient) VerifyToken(accessToken string) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", accessToken)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockClientMockRecorder) VerifyToken(accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockClient)(nil).VerifyToken), accessToken)
}
